      function [sys,x0] = evaprfs(t,x,u,flag,Ename,Fname,Sname,Vname,Lname,Cname1,Cname2,Cname3,Cname4,Cname5,Cname6)

%  EVAPRFS   Multiple effect reverse-feed evaporator model
%
%            For use with FOODS-LIB models
%
%            Synopsis: S-function for multiple effect reverse-feed evaporator 
%            steady-state model. Determines mass and energy balances, 
%            performs design at basic and advanced transport level.
%
%            Call: evaprfs(t,x,u,flag,Ename,Fname,Sname,Vname,Lname,C1name,
%                  C2name,C3name,C4name,C5name,C6name)   
%
%            Passed Arguments:
%             t,x,flag - SIMULINK S-function time, state vector, flag
%             u - SIMULINK S-function input vector; u-array carries stream
%                 and unit operation operating information
%             Ename - evaporator name
%             Fname - feed stream name
%             Sname - steam stream name
%             Vname - vapor stream generated by evaporator name
%             Lname - Liquid concentrate stream name
%             Cname1:Cname6 - Steam condensate stream name exiting effect N 
%
%            Returned Arguments:
%             sys - SIMULINK S-function variable: for flag = 0,
%                   sys = sizes of parameters and initial conditions.
%                   For flag = 3, sys = system outputs which are the
%                   u-arrays for each stream exiting the unit operation
%
%            References:
%             Geankoplis, C.J. 1983.  "Transport Processes and Unit
%               Operations," 2nd ed.  Allyn & Bacon, Inc., Boston.
%             Billet, R. 1989. "Evaporation Technology: Principles,
%               Applications, Economics," Verlagsgesellschaft, mbH, Germany.


%  ********************* SIMULINK INTERFACE INFORMATION *********************

SI = 2;                            % Number of system input streams
SO = 8;                            % Number of system output streams
usize = usizemax;                  % Current u_array size for streams
UOinputs = 34;                     % Number of evaporator operating inputs
 
if flag == 0
   % sys(3) is number of outputs
   % sys(4) is number of inputs
   sys = [0, 0, (SO*usize), ((SI*usize)+UOinputs), 0, 1];
   x0 = ones(size(u));
      
elseif flag == 3 | flag == 9
   % if flag=3, return system outputs
      
%     Breakup of SIMULINK constructed u-array into stream arrays and
%      operating information array
 
      Fuarray = u(1:usize);          % full feed stream array
      Suarray = u(usize+1:2*usize);  % full steam stream array
      UOuarray = u(SI*usize+1:SI*usize+UOinputs);
                                     % full operating inputs array
 
%  *********************** USER-DEFINED DESIGN LEVEL ************************
 
      dlevel = UOuarray(1);           % design level
      mandq = UOuarray(2);            % micro and quality assessment
      econ = UOuarray(3);             % economic evaluation
 
%  ******************* MASS BALANCE LEVEL VARIABLE ASSIGNMENTS **************
 
%     Feed stream information
      F = Fuarray(ulocate('mass')); % mass flow rate (kg/h)
      Fcomp = Fuarray(ulocate('comp1st'):ulocate('complast'));
                                    % component mass fractions (w/w)
      Fctype = Fuarray(ulocate('ctype1st'):ulocate('ctypelast'));
                                    % component types
      Fmass = [F;Fcomp;Fctype];     % mass information array
 
%     Evaporator operation information
      E = UOuarray(4);              % Number of effects  
      Emax = 6;                     % Maximum number of effects 
      if (E > Emax) E = Emax; end   % Limit number of effects to maximum
      Lts(1) = UOuarray(5);         % liquid concentrate total solids (w/w)
 
%  ***************************  MASS BALANCE LEVEL **************************

%     If feed stream mass flow rate is unknown, need to return
      if (F <= 0)
        Vuarray = zeros(usize,1);   % no vapor stream
        Luarray = Fuarray;        % send-out feed info; for system recycle        Cuarray = zeros(usizemax,Emax);
        sys =[Vuarray;Luarray;Cuarray(:,1);Cuarray(:,2);Cuarray(:,3);Cuarray(:,4);Cuarray(:,5);Cuarray(:,6)];
        return;
      end

%     Total solids content of feed (w/w)
      Fts = tsolids(Fcomp,Fctype);

%     User error message:
      if (Lts(1) <= Fts)  % Liquid concentrate total solids cannot be greater
                           %  than feed total solids
        errortxt = [10 'EVAPORATOR (',Ename,') ERROR: Specified total solids of' 10 ...
        'liquid concentrate is less than total solids of feed stream. ' 10];
        disp(errortxt);
        return;        % Stop execution of algorithm
      end

%     Overall Solids Balance
%     Liquid concentrate flow rate (kg/h) from last effect 
      L(1) = F*Fts/Lts(1);

%     Overall Mass Balance - total vapor flow rate (kg/h)
      Vtotal = F-L(1);

%     Initially assume that the vapor flow rate from each effect is equal
      for I = 1:E
        V(I) = Vtotal/E;
        if (I > 1) C(I) = V(I-1); end  
      end

%     Liquid concentrate flow rate (kg/h) and total solids (w/w)
%      out of each effect
      for I = 2:E
        L(I)=V(I-1)+L(I-1);
        Lts(I) = L(I-1)*Lts(I-1)/L(I);
      end

%     Liquid concentrate, vapor, vapor condensate stream component types
      for I = 1:E
        Lctype(:,I) = Fctype;  
        Vctype(:,I) = Fctype; 
        if (I > 1) Cctype(:,I) = Fctype; end   
      end   

%     Compositional breakdown of each liquid concentrate stream
%     For Eth effect:
      for J = 1:length(Fcomp) 
        if (Lctype(J,E) > 1)  
          Lcomp(J,E) = Fcomp(J)*F/L(E);
        else Lcomp(J,E) = 0; 
        end 
        if (Lctype(J,E) == 1) xh2o = J; end   
      end
%     For E-1th thru 1st effects:
      for I = (E-1):-1:1 
        for J = 1:length(Fcomp) 
          if (Lctype(J,I) > 1)  
            Lcomp(J,I) = Lcomp(J,(I+1))*L(I+1)/L(I);
          end  
        end
      end

      for I = 1:E
        Lcomp(xh2o,1:E) = 1.0 - Lts(1:E);
      end

%     Vapor  and vapor condensate composition (w/w) 
      Vcomp(:,E) = abs(F.*Fcomp - L(E).*Lcomp(:,E))./V(E); 
      for I = 1:E-1  
        Vcomp(:,I) = abs(L(I+1).*Lcomp(:,(I+1)) - L(I).*Lcomp(:,I))./V(I);
        if (I > 1) Ccomp(:,I) = Vcomp(:,(I-1)); end  
      end  
      Ccomp(:,E) = Vcomp(:,(E-1));  

%     Exit stream mass arrays; used for print results table 
      Lmass = [L;Lcomp;Lctype];  
      Vmass = [V;Vcomp;Vctype];  
%      if (I > 1) Cmass = [C;Ccomp;Cctype]; end     
      Cmass = [C;Ccomp;Cctype];

%     System output arrays 
      Luarray = Lmass(:,1);  
      Vuarray = Vmass(:,1); 
      Cuarray = [Cmass]; 
      if (E < Emax) Cuarray(size(Cuarray,1),Emax) = 0; end  

      if (dlevel == 1)
        endtxt = [10 'END OF EVAPORATOR (',Ename,') MASS BALANCE' 10];
        disp(endtxt);
      end  

%  **************** ENERGY BALANCE LEVEL VARIABLE ASSIGNMENTS ***************

      if (dlevel >= 2)

%     Reference temperature (K)
      Tref = tref;

%     Feed stream information
      FtempC = Fuarray(ulocate('temp'));% temperature (C)
      FtempK = FtempC + Tref;            % temperature (K)
      Fme = [Fmass;FtempK;Fuarray(ulocate('pressure'):ulocate('quality'))];
                                         % mass and energy information array
%     Steam supply information
      S = Suarray(ulocate('mass'));      % mass flow rate (kg/h)
      Scomp = Suarray(ulocate('comp1st'):ulocate('complast'));
                                         % component mass fractions (w/w)
      Sctype = Suarray(ulocate('ctype1st'):ulocate('ctypelast'));
                                         % component types
      Smass = [S;Scomp;Sctype];          % mass information array
      StempC = Suarray(ulocate('temp')); % temperature (C)
      StempK = StempC + Tref;            % temperature (K)
      Spres = Suarray(ulocate('pressure'));    % pressure (MPa)
      Sx = Suarray(ulocate('quality'));   % quality
      Sme = [Smass;StempK;Spres;Sx];
                                         % mass and energy information array
%     Evaporator operation information
      Pin(E) = UOuarray(6);                  % operating pressure (MPa)
      Cx(1) = UOuarray(7);                   % steam condensate exit quality
      BPRmodel = UOuarray(8);             % boiling point rise model

%  *********************** ENERGY BALANCE LEVEL *****************************
 
%     If feed stream and vapor stream are not fully defined, need to return
      if (FtempK <= Tref) | (StempK <= Tref)
        Vuarray = ustd(Vmass(:,E));    % vapor stream knowns
        Luarray = ustd(Lmass(:,E));    % liquid concentrate knowns
        Cuarray = zeros(usize,Emax);   % no steam condensate streams
        sys =[Vuarray;Luarray;Cuarray(:,1);Cuarray(:,2);Cuarray(:,3);Cuarray(:,4);Cuarray(:,5);Cuarray(:,6)];
       return;
      end

      if (Smass > 0)
        errortxt = [10 'EVAPORATOR (',Ename,') ERROR: N-Effect Reverse Feed' 10 ...  
        'Evaporator model can only handle steam from a steam source', 10];
                disp(errortxt);
        return;        % Stop execution of algorithm
      end
 
%     Enthalpy of feed stream (kJ/kg(stream))
      Fh = enthalpy(Fme);  
 
%     Enthalpy of source steam (kJ/kg(steam))
      Sh = enthalpy(Sme); 

%     Enthalpy of steam condensate (kJ/kg(steam)); assumes condensation
%      is a constant pressure-constant temperature process   
      Ccomp(:,1) = Scomp;
      Cctype(:,1) = Sctype;
      Cmass(:,1) = Smass;
      CtempK(1) = StempK;
      Cpres(1) = Spres;
      Cme(:,1) = [Cmass(:,1);CtempK(1);Cpres(1);Cx(1)];
      Ch(1) = enthalpy(Cme);  

%     Latent heat of stream condensation (kJ/kg(steam)) 
      latcond(1) = Sh-Ch(1);  
 
%     Tracking for first time through algorithm
      eflag = 0;
      eflag2 = 0;     % WHERE IS THIS VARIABLE USED?
      iter = 0;  

%     Convergence criteria for vapor flow rates
      vapdiff = 1;
      while all(vapdiff > 0.5e-1)
%       Liquid concentrate flow rate (kg/h) and total solids (w/w)
%        out of each effect
        for I = 2:E 
          L(I)=V(I-1)+L(I-1);
        end

%       Convergence criteria for heat transfer areas
        Adiff = 1;
        Udiff = 1;
        criteria = 1e-2;
        while (any(Adiff > 1.0e-1)) % & any(Udiff > 1e-1)) MUST REINSERT  

          txt = [10 'PERFORMING CALCULATIONS ON (',Ename,')',10];
          disp(txt);  

          iter = iter + 1;
          if iter > 30 break; break; end  
          for I = 2:E 
            Lts(I) = L(I-1)*Lts(I-1)/L(I);
          end

%         Compositional breakdown of each liquid condensate stream
%         For Eth effect:
          for J = 1:length(Fcomp)
            if (Lctype(J,E) > 1)
              Lcomp(J,E) = Fcomp(J)*F/L(E);
            else Lcomp(J,E) = 0;
            end
            if (Lctype(J,E) == 1) xh2o = J; end
          end
%         For E-1th thru 1st effects:
          for I = (E-1):-1:1 
            for J = 1:length(Fcomp)
              if (Lctype(J,I) > 1)
                Lcomp(J,I) = Lcomp(J,(I+1))*L(I+1)/L(I);
              end
            end
          end   
          for I = 1:E
            Lcomp(xh2o,1:E) = 1.0 - Lts(1:E);  % water component 
          end
          Lmass = [L;Lcomp;Lctype]; % mass info 

%         Boiling point of exit stream: first estimate at saturation
%         temperature (K) associated with vapor space pressure in last
%         effect
          Tboil(E) = tpsteam(Pin(E));

%         Estimate boiling point rise (K)
          for bprflag = 0:1 
            for I = 1:E
              if (bprflag == 0) 
%               Assume no BPR so to get Tboil = Tsat in each effect
                BPR(I) = 0.00;
              else  
%               Assume BPR is taken at Tboil = Tsat 
                BPR(I) = bpr(Lcomp(:,I),Lctype(:,I),Tboil(I),BPRmodel);
              end  
            end

%           Overall change in temperature from steam entrance to final
%           concentrate
            sumdelT = StempK - Tboil(E) - sum(BPR);

%           Difference in temperature between condensing steam and
%            boiling point; related to U (kJ/h-m^2-K)
            if ~exist('ohtcoeff')         % (dlevel ~= 3 & eflag == 0)
              K = 0;      % WHERE IS THIS VARIABLE USED?   
%             If no U's given; itinitially set to 1000 kJ/h-m^2-K
              ohtcoeff = 1000*ones(1,E);
            end
%           For first time through algorithm:
            if (eflag == 0)
              Udenom = sum(1.0./ohtcoeff);
              delT = sumdelT.*(1.0./ohtcoeff)./Udenom;
%             Marker for end of first pass through algorithm
%             eflag = 1;  
              if (bprflag == 1) eflag = 1; end  
%             For all other times through algorithm
            end 
%           if (eflag == 1) & (bprflag == 0) & (iter > 1)  
            if (eflag == 1) & (iter > 1) & (dlevel > 2)  
              if (bprflag == 0) 
                delTold = delT;
                delT = (delT.*areaevap)./Aavg;
              else
                delT = (delTold.*areaevap)./Aavg;
              end
            end

%           Exit liquid concentrate temperature (boiling temperature)
%           and exit steam/vapor condenate temperature (K) from each effect
            Tboil(1) = StempK - delT(1);
            Tstcond(1) = StempK;
%           Assumes vapor out of last effect is immediately condensed.
            for I = (E-1):-1:2  
              Tboil(I) = Tboil(I+1) - BPR(I+1) + delT(I);
            end 
            for I = 2:E  
              Tstcond(I) = Tboil(I-1) - BPR(I-1);
            end

          end % bprflag-loop

%         Saturated pressure (MPa) in vapor space (Pin) of each effect  
%          based on liquid concentrate temperature without BPR.
          for I = 1:(E-1)
            Pin(I) = ptsteam(Tboil(I)-BPR(I));
          end
          for I = 2:E
            Cpres(I) = Pin(I-1);
            CtempK(I) = tpsteam(Cpres(I));
          end

%         Liquid concentrate mass and energy array  
          Lx = zeros(1,E);   
          Lme = [Lmass;Tboil;Pin;Lx]; 
%         Enthalpy of liquid concentrate stream (kJ/kg)
          for I = 1:E 
            Lh(I) = enthalpy(Lme(:,I)); 
          end   

%         Enthalpy of vapor streams out of each effect (kJ/kg(steam))
          for I = 1:E
            if (BPR(I) == 0) 
              Vx(I) = 1;
              Vh(I) = hsteam(Tboil(I),0.0,Vx(I)); 
            else  
              Vx(I) = 2;   % Superheated vapor if BPR > 0 
              Vh(I) = hsteam(Tboil(I),Pin(I),Vx(I)); end  
          end

%         Latent heat of condensation of vapor in effects 2 through E
          Cx(1,E) = 0; 
          for I = 2:E
            Ch(I) = hsteam(Tstcond(I),0,Cx(I));
            latcond(I) = Vh(I-1) - Ch(I);
          end

%         Solution of heat balances
          if (E == 2)
%           Solution of heat balance for 2 Effects
            L(E) = (F*(Vh(E)-Fh)+L(1)*latcond(E))/(latcond(E)+Vh(E)-Lh(E));

          else 

%           Solution of heat balances on each effect of 3+
%            (Solution of type Ax=b)
%           Fill liquid concentrate coefficient array 
%             (A for Gauss-Jordan Elimination)
            for I = 1:(E-1)
              Lcoeff(I,I) = latcond(I+1) - Lh(I+1) + Vh(I+1);
            end
 
            for I = 1:(E-2)
              Lcoeff(I+1,I) = -latcond(I+2);
              Lcoeff(I,I+1) = Lh(I+2) - Vh(I+1);
            end
 
%           Fill solution array with known values
%            (b for Gauss-Jordan Elimination):
%           energy of feed stream and energy of liquid condensate coming
%           out of last effect.
            for I = 1:(E-1)
              Lsol(I,1) = 0.0;
            end
            Lsol(1,1) = L(1)*latcond(2);
            Lsol(E-1,1) = F*(Vh(E)-Fh);
 
%           Solutions of type x = A\b
            liqc = Lcoeff\Lsol;
            for I = 1:(E-1)
              L(I+1) = liqc(I);
            end
          end
 
%         Steam requirement (kg/h)
          S = (L(1)*Lh(1) - L(2)*Lh(2) + (L(2)-L(1))*Vh(1))/latcond(1);

%         Steam economy
          stecon = Vtotal/S;

%         New vapor flow rates (kg/h)
          vapnew(E) = F - L(E);
          for I = 1:E-1  
            vapnew(I) = L(I+1) - L(I);
          end
 
%         Check that new vapor flow rates (kg/h) are approximately equal to
%         the original estimates.
          vapdiff = abs((vapnew - V) ./ V);
          V = vapnew;
%         Vapor Condensates (kg/h)
          C(1) = S;
          for I = 2:E
            C(I) = V(I-1);
          end

%         Heat transfer in each effect (kJ/h)
          Q(1) = S*latcond(1);
          for I = 2:E
            Q(I) = V(I-1)*latcond(I);
          end

%         Update mass information arrays 
%         Update mass information arrays
%     Compositional breakdown of each liquid concentrate stream
%     For Eth effect:
      for J = 1:length(Fcomp)
        if (Lctype(J,E) > 1)
          Lcomp(J,E) = Fcomp(J)*F/L(E);
        else Lcomp(J,E) = 0;
        end
        if (Lctype(J,E) == 1) xh2o = J; end
      end
%     For E-1th thru 1st effects:
      for I = (E-1):-1:1
        for J = 1:length(Fcomp)
          if (Lctype(J,I) > 1)
            Lcomp(J,I) = Lcomp(J,(I+1))*L(I+1)/L(I);
          end
        end
      end  

      for I = 1:E
        Lcomp(xh2o,1:E) = 1.0 - Lts(1:E);
      end
          Lmass = [L;Lcomp;Lctype];
          Smass = [S;Scomp;Sctype];            
          Vmass = [V;Vcomp;Vctype]; 
          Cmass = [C;Ccomp;Vctype]; 

%         Update mass and energy info arrays 
          Lme = [Lmass;Tboil;Pin;Lx];
          Sme = [Smass;StempK;Spres;Sx];  
          Vme = [Vmass;Tboil;Pin;Vx];
          Cme = [Cmass;Tstcond;Cpres;Cx];

%         System output arrays
          Luarray = Lme(:,E);
          Vuarray = Vme(:,E);
          Cuarray = Cme;
          if (E < Emax) Cuarray(size(Cuarray,1),Emax) = 0; end

          if (dlevel == 2) 
            endtxt = [10 'END OF EVAPORATOR (',Ename,') ENERGY BALANCE' 10];
            disp(endtxt);
            break; break; 
          end   % get out of while-Adiff and while-vapdiff 

%  *************** BASIC TRANSPORT LEVEL VARIABLE ASSIGNMENTS ***************

          if (dlevel >= 3)

%         Evaporator operation information
          for I = 1:E 
%           Overall heat transfer coefficient (kJ/h-m^2-K)
            ohtcoeff(I) = UOuarray(8+I); 
          end  
          Din = UOuarray(15);         % inner pipe diameter (m)
          length = UOuarray(16);      % pipe length (m)

          end % Basic Transport Level Assignments

%  ************************** BASIC TRANSPORT LEVEL *************************

          if (dlevel == 3)

%         Area of heat exchange for each effect based on inside area (m^2)
          areaevap = Q ./ (ohtcoeff .* delT);  

%         Check that the areas are approximately equal.
          Aavg = mean(areaevap);
          Adiff = abs((areaevap-Aavg) ./ Aavg);
%         Using new liquid condensate flow rates resolve starting with
%             recalculation of total solids contentent of each liquid
%             condensate stream in Mass Balances.

%         Surface area per tube (m^2)
          Aint = pi*Din*length;   
          criteria = Aint;  
 
%         Number of Tubes
          Ntmax = ceil(max(areaevap./Aint));

 
          end  % Basic Transport Level

%  ************* ADVANCED TRANSPORT LEVEL VARIABLE ASSIGNMENTS **************

          if (dlevel >= 4)

%         Evaporator operation inforamtion
          evaptype = UOuarray(17);  % evaporator model
          vertical = UOuarray(18);  % tube orientation;
                                   %  vertical (1); horizontal (0)
          mumodel = UOuarray(19);   % viscosity model
          wallthk = UOuarray(20);  % pipe thickness (m)
          Do = Din + 2*wallthk;    % outer pipe diameter (m)
          kpipe = UOuarray(21);    % pipe thermal conductivity (kJ/h-m-K)
          vmin = UOuarray(22);     % minimum average fluid velocity per tube (m/s)
          fthick = UOuarray(23);   % film thickness (m)
          if (iter == 1) Nt = UOuarray(24)*ones(1,E); end 
                                   % initial guess at number of tubes

%  ************************ ADVANCED TRANSPORT LEVEL ************************

%         Cross sectional area of tube (m^2)
          Axin = pi*((Din/2)^2-(((Din-2*fthick)/2))^2);
 
%         Feed density (kg/m^3)
          Frho = rho(Fcomp,Fctype,FtempK);

          for I = 1:E 

%           Set first guess at recirculation mix in evap mass and
%            energy information array
            if (I == 1)  
              Mme(:,I) = Fme;
              Mmenew(:,I) = Fme;
              Mmenew(1,I) = Mme(1,I)*1e5;
            else 
              Mme(:,I) = Lme(:,I-1);
              Mmenew(:,I) = Lme(:,I-1);
              Mmenew(1,I) = Mme(1,I)*1e5; 
            end  


%           Looking for recirculation mix mass flow rate to be within 
%            a specified range for two consectutive iterations
            J = 0;              % index for tracking number of iterations
            while (abs(Mme(1,I) - Mmenew(1,I)) > 1e4)
              J = J+1;
              if J == 30 break; end  % break from loop after 30 iterations

%             Reset recirculation mix mass flow rate for next iteration
              if (J > 1) Mme = Mmenew; end  

%             Trial & Error solution for inside and outside heat transfer
%              coefficients
%             Looking for steam/vapor side wall temp guess to equal 
%              calculated value
%             Guess at Temperature at steam side tube wall (K)
              Twvguess = linspace(Tstcond(I)-0.1,Tboil(I)+0.1,100);
              for N = 1:100
                 	 
                if (I == 1)  
%                 Outside heat transfer coefficient (kJ/h-m^2-K)
                  hoarray = hostcond(StempK,Spres,Twvguess(N),Do,length,vertical,Nt(I));
                  houtN(N) = hoarray(1);
                  NReoN(N) = hoarray(2);
                  NNuoN(N) = hoarray(3);

%                 Temperature at product side tube wall (K)
                  TwlN(N) = Twvguess(N) - houtN(N)*wallthk/kpipe*(StempK-Twvguess(N));
                else 
%                 Outside heat transfer coefficient (kJ/h-m^2-K)
                  hoarray = hostcond(Tstcond(I),0,Twvguess(N),Do,length,vertical,Nt(I));
%                 hoarray = hostcond(0,Pin(I-1),Twv(I),Do,length,vertical,Nt(I));
                  houtN(N) = hoarray(1);
                  NReoN(N) = hoarray(2); 
                  NNuoN(N) = hoarray(3);

%                 Temperature at product side tube wall (K)  
%                 Twl(I) = Twv(I) - hout(I)*wallthk/kpipe*(Tboil(I-1)-Twv(I));
                  TwlN(N) = Twvguess(N) - houtN(N)*wallthk/kpipe*(Tstcond(I)-Twvguess(N));
                end  

%               Inside heat transfer coefficient (kJ/h-m^2-K)
                evapdesc = [Din fthick vmin length TwlN(N) evaptype mumodel];
                hiarray = hievap(Mme(:,I),Lme(:,I),evapdesc);
                hinN(N) = hiarray(1);
                NReiN(N) = hiarray(2);  
                NPriN(N) = hiarray(3);
                NNuiN(N) = hiarray(4);  

%               Calculated temperature at steam side tube wall (K)
                if (I == 1) 
                  Twvnew(N) = ((houtN(N)/hinN(N))*StempK+ ... 
                      houtN(N)*wallthk/kpipe*StempK+Tboil(I))/ ...
                      (1+houtN(N)*wallthk/kpipe+houtN(N)/hinN(N));

                else 
                  Twvnew(N) = ((houtN(N)/hinN(N))*Tstcond(I)+ ... 
                      houtN(N)*wallthk/kpipe*Tstcond(I)+Tboil(I))/ ...
                      (1+houtN(N)*wallthk/kpipe+houtN(N)/hinN(N));
                end 
      
                Twvdiff(N) = Twvguess(N) - Twvnew(N);  
                if (Twvdiff(N) < 0) break; end 

              end % for loop for wall temperature

%             Locate index for least difference between calculated value 
 
              Twvdiffmin = min(abs(Twvdiff(N)),abs(Twvdiff(N-1)));
              index = findval1(abs(Twvdiff),Twvdiffmin);
              Twv(I) = Twvguess(index) 
              Twl(I) = TwlN(index) 
              hout(I) = houtN(index) 
              NReo(I) = NReoN(index) 
              NNuo(I) = NNuoN(index) 
              hin(I) =  hinN(index) 
              NRei(I) = NReiN(index)  
              NPri(I) = NPriN(index) 
              NNui(I) = NNuiN(index) 

%             Overall Heat Transfer Coefficient (kJ/h-m^2-K) 
              ohtcoeff(I) = 1/(1/hout(I) + wallthk/kpipe + 1/hin(I));  
%             Effective Heat Transfer Area 
              if (I == 1)  
                Aeffect(I) = Q(I)/(ohtcoeff(I)*(StempK - Tboil(I)))  
              else 
                Aeffect(I) = Q(I)/(ohtcoeff(I)*(Tboil(I-1) - Tboil(I)))  
              end   

%             Total outside area required for heat transfer (m^2)
%             if (I == 1) 
%             Aout(I) = Q(I)/(hout(I)*(StempK-Twv(I)))
%             else  
%               Aout(I) = Q(I)/(hout(I)*(Tstcond(I)-Twv(I)))
%             end
 
%             Total inside area required for heat transfer (m^2)
%             Ain(I) = Q(I)/(hin(I)*(Twl(I)-Tboil(I)))  

%             Outside Area per tube (m^2)
              Aoutt = pi*length*Do;

%             Number of tubes
              Nt(I) = ceil(Aeffect(I)/Aoutt)             

              if evaptype <= 20
%               Recirculation mass flow to achieve minium velocity
                M(I) = Nt(I)*vmin*Axin*Frho*3600;
                R(I) = M(I) - F;      % recirculation flow rate
                if (R(I) < 0) R(I) = 0; end
                recyrat(I) = R(I)/L(I);  % recirculation ratio
%               Component mass fractions (w/w) and types for recirculation
%                 and recirculation temperature (K)
                if (I == 1)
                  Mcomp(:,I) = (F.*Fcomp + R(I).*Lcomp(:,I))./M(I);
%                 Recirculation temperature (K)
                  MtempK(I) = mixtemp([Fme Lme(:,I)]);
                else
                  Mcomp(:,I) = (L(I).*Lcomp(:,I-1) + R(I).*Lcomp(:,I))./M(I);
                  MtempK(I) = mixtemp([Lme(:,I-1) Lme(:,I)]);
                end
                Mctype(:,I) = Fctype;
%               Recirculation mass and energy information array
                Mmenew(:,I) = [M(I);Mcomp(:,I);Mctype(:,I);MtempK(I);Pin(I);0];               
              end
            end % while loop for recirculation  

          end % for each effect  
 
%         Check that the areas are approximately equal.
          areaevap = Aeffect; 
          Aavg = mean(areaevap); %  Asum/E 
          Adiff = abs((areaevap-Aavg) ./ Aavg) 
%         Number of tubes
          Ntmax = max(Nt); 
%            Using new liquid condensate flow rates resolve starting with
%            recalculation of total solids content of each liquid
%            condensate stream in Mass Balances.

        end % Advanced Transport Level   

        end % while Adiff > criteria 
      end % while vapdiff > criteria 
    end  % Energy Balance Level 

    if (dlevel >= 3) 
%     Pumping power required to pump from effect to effect against pressure 
%     for I = 2:E
%       Liquid concentrate density (kg/m^3)  
%       Lrho(I) = rho(Lcomp(:,I),Lctype(:,I),Tboil(I))    
%       Pump power (kW) 
%       pumpkW(I-1) = L(I)*(Pin(I-1)-Pin(I))/Lrho(I)/3.6        
%     end  
    end  

    if (dlevel == 3) 
      endtxt = [10 'END OF EVAPORATOR (',Ename,') BASIC TRANSPORT' 10]; 
      disp(endtxt); 
    end  

    if (dlevel == 4) 

%   Vapor space determination
%   Vapor load (m^3/m^3-h) at 1 bar
    vc = 7300;
 
    for I = 1:E

%     Adjustment factor for vapor spaces at pressure other than 1 bar
      f = [1.35; 1; 0.93; 0.91; 0.885; 0.875; 0.865; 0.86; 0.855; 0.85;];
      P = [0.05; 0.1; 0.15; 0.2; 0.25; 0.3; 0.35; 0.4; 0.45; 0.5;];
      if (Pin(I) < min(P))
        factor = max(f)
      elseif (Pin(I) > max(P))
        factor = min(f)
      else
        factor = interp1(P,f,Pin(I));
      end
      vcPin(I) = factor*vc;

%     Vapor velocity (m/s): assumes at 1 bar that velocity is 1 m/s
      rhov1 = rhosteam(0,0.1,1);
      rhovPin(I) = rhosteam(Tboil(I),Pin(I),Vx(I));
      velvPin(I) = sqrt(rhov1/rhovPin(I));

%     Vapor space capacity (m^3)
      VB(I) = V(I)/(rhovPin(I)*vcPin(I));  
    end

%   Size of vapor space for all effects is based on maximum requirement
    [VBmax,I] = max(VB);   

%   Diameter of vapor space (m)
    dB = sqrt(4*V(I)/(3600*pi*velvPin(I)*rhovPin(I)));  
 
%   Height of vapor space (m)
    Hv = 4*V(I)/(pi*dB^2*rhovPin(I)*vcPin(I));  

    endtxt = [10 'END OF EVAPORATOR (',Ename,') ADVANCED TRANSPORT' 10]; 
    disp(endtxt); 

    end % Advanced Tranport Level   
 
%  *************** MICROBIAL & QUALITY VARIABLE ASSIGNMENTS *****************

%     Feed Microbial Death Kinetics
      Dvalm = Fuarray(ulocate('microDval'));   % D value (min)
      DtempCm =  Fuarray(ulocate('microDtemp'));% D value temperature basis (C)
      DtempKm = DtempCm+Tref; % D value temperature basis (K)
      Zvalm =  Fuarray(ulocate('microZval'));   % Z value (C)
      Eam =  Fuarray(ulocate('microEa'));       % activation energy (kcal/mol)
      Noin =  Fuarray(ulocate('microload'));     % microbial load
      Fmdk = [Dvalm;DtempCm;Zvalm;Eam;Noin];  % microbial array

%     Feed Quality Kinetics
      Dvalq = Fuarray(ulocate('qualDval'));    % D value (min)
      DtempCq = Fuarray(ulocate('qualDtemp')); % D value temperature basis (C)
      DtempKq = DtempCq+Tref; % D value temperature basis (K)
      Zvalq = Fuarray(ulocate('qualZval'));     % Z value (C)
      Eaq = Fuarray(ulocate('qualEa'));       % activation energy (kcal/mole)
      Qoin =  Fuarray(ulocate('qualload'));     % quality load
      Fqual = [Dvalq;DtempCq;Zvalq;Eaq;Qoin];  % quality array

%  ********************* MICROBIAL & QUALITY ASSESSMENT *********************

%     Pass microbial and quality assessment variables to liq. conc. streams
      Lmdk = zeros(size(Fmdk,1),E);
      Lqual = zeros(size(Fqual,1),E);
      for I = 1:E
        Lmdk(:,I) = Fmdk;
        Lqual(:,I) = Fqual;
      end
 
      if (mandq == 1) & (dlevel >= 3)

%     Volume hold up in tubes  
      if (dlevel == 3)
        Vhold = Ntmax*pi*(Din/2)^2*length;  
      else 
        if (Din <= 2*fthick)  
          Vhold = Ntmax*pi*(Din/2)^2*length;  
        else   
          Vhold = Ntmax*pi*((Din/2)^2-((Din-2*fthick)/2))*length;
        end 
      end 

      for I = 1:E 
        if (I == 1)  
%         Bulk temperature on product side (K)
          Tbulk(I) = (FtempK+Tboil(I))/2;  
%         Bulk density of concentrated product (kg/m^3)
          rhobulk = rho(Fcomp,Fctype,Tbulk(I));
%         Volumetric liquid flow rate
          Lvol = F/rhobulk;  
        else 
%         Bulk temperature on product side (K)
          Tbulk(I) = (Tboil(I-1)+Tboil(I))/2;  
%         Bulk density of concentrated product (kg/m^3)
          rhobulk = rho(Lcomp(:,I-1),Lctype(:,I-1),Tbulk(I));
%         Volumetric liquid flow rate
          Lvol = L(I-1)/rhobulk; 
        end 
%       Minimum Residence Time (min)
        tmin(I) = Vhold/Lvol*60;  
 
%       Final microbial load 
        if (I == 1)  
          Nout(I) = mdeathk(Dvalm,DtempKm,Zvalm,Eam,Noin,Tbulk(I),tmin(I));  
        else 
          Nout(I) = mdeathk(Dvalm,DtempKm,Zvalm,Eam,Nout(I-1),Tbulk(I),tmin(I));  
        end  

      end % for each effect   

%     Log reduction in microbial load
      DlogNred = log10(Noin/Nout(E));

      if (dlevel == 3)
        for I = 1:E  
%         Maximum processing time = Minimum processing time (min) 
          tqmax(I) = tmin(I);
%         Temperature for quality assessment taken as liquid conc. exit temp (K)
          Tqual(I) = Tboil(I);
%         Final quality for single pass at liq. conc. boiling point
          if (I == 1) 
            Qout(I) =  qualdegr(Dvalq,DtempKq,Zvalq,Eaq,Qoin,Tqual(I),tqmax(I));
          else 
            Qout(I) =  qualdegr(Dvalq,DtempKq,Zvalq,Eaq,Qout(I-1),Tqual(I),tqmax(I));
          end 
        end 

      elseif (dlevel >= 4) & (Mme(ulocate('mass')) > Fme(ulocate('mass')))
        for I = 1:E
%         Temperature for quality assessment taken as liquid conc. wall temp (K)  
          Tqual(I) = Twl(I); 
          if (I == 1) 
            Fnew = F;
            Fold = F;
          else 
            Fnew = L(I-1);
            Fold = L(I-1);
          end 
          X = 0;
          first = 0;
          notrecy = 1/(recyrat(I)+1);
 
          while (Fnew > 0.1*Fold)
            X = X+1;
            Fnew = Fnew - notrecy*Fnew;  
            if Fnew <= 0.5*Fold & first == 0
              first = 1;
              J = X;
            end
          end
 
          t50(I) = tmin(I)*J;
          tqmax(I) = tmin(I)*X;

          if (I == 1)  
%           Final quality for time when 50% of feed leaves the evaporator
            Qout50(I) =  qualdegr(Dvalq,DtempKq,Zvalq,Eaq,Qoin,Tqual(I),t50(I));
%           Final quality for time when 90% of feed leaves the evaporator
            Qout(I) =  qualdegr(Dvalq,DtempKq,Zvalq,Eaq,Qoin,Tqual(I),tqmax(I));
          else 
            Qout50(I) =  qualdegr(Dvalq,DtempKq,Zvalq,Eaq,Qout(I-1),Tqual(I),t50(I));
            Qout(I) =  qualdegr(Dvalq,DtempKq,Zvalq,Eaq,Qout(I-1),Tqual(I),tqmax(I));  
          end  
        end 
    
      elseif (dlevel >= 4) and (Mme(ulocate('mass')) == Fme(ulocate('mass')))
        for I = 1:E
%         Temperature for quality assessment taken as liquid conc. wall temp (K)
          if (NRei(I) < 2100)
            Tqual(I) = Twl(I); 
          else 
            Tqual(I) = Tbulk(I);
          end  
%         Maximum processing time = Minimum processing time (min)
          tqmax(I) = tmin(I)
          if (I == 1)   
%           Final quality for single pass evaporator
            Qout(I) =  qualdegr(Dvalq,DtempKq,Zvalq,Eaq,Qoin,Tqual(I),tqmax(I));
          else  
            Qout(I) =  qualdegr(Dvalq,DtempKq,Zvalq,Eaq,Qoout(I-1),Tqual(I),tqmax(I));
          end 
        end 
      end 

%     Log reduction in quality
      DlogQred = log10(Qoin/Qout(E));

      for I = 1:E  
%       Liquid concentrate microbial and quality arrays
        Lmdk(:,I) = Fmdk; 
        Lmdk(size(Fmdk,1),I) = Nout(I);
        Lqual(:,I) = Fqual;
        Lqual(size(Fqual,1),I) = Qout(I);
      end 

      endtxt = [10 'END OF EVAPORATOR (',Ename,') MICROBIAL & QUALITY ASSESSMENT' 10];
      disp(endtxt);

      end % micobial and quality assessment 

%     Update system output array
      Luarray = [Lme(:,E);Lmdk(:,E);Lqual(:,E)];

%  ****************** ECONOMIC EVALUATION VARIABLE ASSIGMENTS ***************

      if (econ >= 1)
        ECON1 = UOuarray(25:34); % evap economic analysis array
%       ECON2 = UOuarray(35:44); % pump economic analysis array
      end

%  ********************* SYSTEM OUTPUT ARRAY ASSIGNMENT *********************

%     Size stream info arrays to full system output u-arrays
      Vuarray = ustd(Vuarray);
      Luarray = ustd(Luarray);
      Cuarray = ustd(Cuarray);

      sys =[Vuarray;Luarray;Cuarray(:,1);Cuarray(:,2);Cuarray(:,3);Cuarray(:,4);Cuarray(:,5);Cuarray(:,6)];

%  ****************************** PRINTED OUTPUT ****************************
  if flag == 9    % print only after a solution is found

%   Print results to specified file name;
%    call filename manager function rfile.m
    fid = rfile; 

%   Name of unit operation; system input streams; system output streams
    UNAME = Ename;
    SINAMES = str2mat(Fname,Sname);
    SONAMES = str2mat(Lname,Vname);
    for I = 1:Emax 
      if ((dlevel >= 2) | ((dlevel == 1) & (I > 1)))
        CnameE = ['Cname' int2str(I)];
        if exist(CnameE) 
          Cnsize = size(eval([CnameE]),2);
          if (dlevel == 1) SONAMES((2+I-1),1:Cnsize) = eval([CnameE]); end   
          if (dlevel >= 2) SONAMES((2+I),1:Cnsize) = eval([CnameE]); end   
        end 
      end 
    end  
%   Assignment of intermediate stream names 
    for I = 2:E 
      LIname = ['Liq' int2str(I)];  
      SNNAMES(I-1,1:size(LIname,2)) = LIname;
    end 
    for I = 1:E-1 
      VIname = ['Vap' int2str(I)];
      SNNAMES(E-1+I,1:size(VIname,2)) = VIname;  
    end    


    if (dlevel == 1)
%     System inputs array
      SIARRAY = [Fmass]; 
    elseif (dlevel >= 2)
%     System inputs array
      SIARRAY = [Fmass Smass]; 
    end 

%   System outputs array
    SOARRAY = [Lmass(:,1) Vmass(:,E)];
    if (dlevel == 1) 
      for I = 2:E
        SOARRAY = [SOARRAY Cmass(:,I)];
      end  
    else 
      for I = 1:E
        SOARRAY = [SOARRAY Cmass(:,I)];  
      end  
    end 

%   System intermediate streams   
    SNARRAY = [];
    for I = 2:E
      SNARRAY = [SNARRAY Lmass(:,I)];
    end
    for I = 1:E-1 
      SNARRAY = [SNARRAY Vmass(:,I)];
    end  
 
%   Print mass balance results table
    msprint(UNAME,SINAMES,SONAMES,SNNAMES,SIARRAY,SOARRAY,SNARRAY);

    if (dlevel >= 2) 
%     System inputs array
      SIARRAY = [Fme Sme];   
%     System outputs array 
      SOARRAY = [Lme(:,1) Vme(:,E)];
      for I = 1:E
        SOARRAY = [SOARRAY Cme(:,I)]; 
      end 
%     System intermediate streams  
      SNARRAY = [];
      for I = 2:E
        SNARRAY = [SNARRAY Lme(:,I)];
      end
      for I = 1:E-1 
        SNARRAY = [SNARRAY Vme(:,I)];
      end  
 
%     Print energy balance results table
      eprint(UNAME,SINAMES,SONAMES,SNNAMES,SIARRAY,SOARRAY,SNARRAY);

    end % energy balance tables 

    % THIS IS WHERE THE CHANGE WAS MADE 8/21/01
    fid = fopen(fid,'a+');
    % END CHANGE 8/21/01

    fprintf(fid,'EVAPORATOR MODEL INPUTS\n');
    fprintf(fid,'     \n');
    fprintf(fid,'  Liquid Concentrate Total Solids      %6.5f w/w \n',Lts(1));
 
    if (dlevel >= 2)
      fprintf(fid,'  Operating Pressure in Last Effect      %5.3f MPa \n',Pin(E));
      fprintf(fid,'  Steam Condensate Quality               %5.3f \n',Cx(1));
      fprintf(fid,'  Boiling Point Rise Model               %5.0f \n',BPRmodel);
    end
 
    if (dlevel == 3)
      for I = 1:E 
      fprintf(fid,'  Overall Heat Transfer Coefficient in Effect %1.0f %5.3e kJ/h-m^2-K\n',I,ohtcoeff(I));
      end 
    end 
 
    if (dlevel >=3)
      fprintf(fid,'  Inner Tube Diameter                   %5.4f m \n',Din);
      fprintf(fid,'  Tube Length                            %5.2f m \n',length);
    end

    if (dlevel >= 4)
      fprintf(fid,'  Evaporator Model                       %5.0f \n',evaptype);
      fprintf(fid,'  Tube Orientation                       %5.0f \n',vertical);
      fprintf(fid,'  Viscosity Model                        %5.0f \n',mumodel);
      fprintf(fid,'  Wall Thickness                        %5.4f m \n',wallthk);
      fprintf(fid,'  Pipe Thermal Conductivity         %5.4e kJ/h-m-K \n',kpipe);
      fprintf(fid,'  Minimum Average Velocity               %5.2f m/s \n',vmin);
 
    end
 

    fprintf(fid,'     \n');
    fprintf(fid,'EVAPORATOR MODEL OUTPUTS\n');
    fprintf(fid,'     \n');
    if (dlevel >=2)
      fprintf(fid,'  Steam Economy                          %5.3f \n',stecon);
    end 

    if (dlevel == 2) 
    fprintf(fid,'     \n');
    fprintf(fid,'  Evaporator Design:\n');
    fprintf(fid,'     \n');
    fprintf(fid,'Effect    Temp      BPR     Pressure          Q   \n');
    fprintf(fid,'          (C)       (C)      (MPa)          (kJ/h)   \n');
    fprintf(fid,'------------------------------------------------------\n');
    for I = 1:E
      fprintf(fid,' %1.0f      %6.2f     %5.2f     %5.4f      %7.5e  \n',I,Tboil(I)-Tref,BPR(I),Pin(I),Q(I));
    end
    fprintf(fid,'------------------------------------------------------\n');
    fprintf(fid,'     \n');

    end 
 
    if (dlevel >= 3) 
    fprintf(fid,'     \n');
    fprintf(fid,'  Evaporator Design:\n');
    fprintf(fid,'     \n');
    fprintf(fid,'Effect    Temp      BPR     Pressure          U               Q            Area\n');
    fprintf(fid,'          (C)       (C)      (MPa)       (kJ/h-m^2-K)       (kJ/h)         (m^2)\n');
    fprintf(fid,'------------------------------------------------------------------------------------\n');
    for I = 1:E  
      fprintf(fid,' %1.0f     %6.2f      %5.2f     %5.4f        %8.2f        %7.5e     %6.2f\n',I,Tboil(I)-Tref,BPR(I),Pin(I),ohtcoeff(I),Q(I),areaevap(I));
    end  
    fprintf(fid,'------------------------------------------------------------------------------------\n');
    fprintf(fid,'     \n');
    fprintf(fid,'  Maximum Number of Tubes                     %5.0f \n',Ntmax);
    if dlevel > 3
        if evaptype <= 20
         for I = 1:E  
           fprintf(fid,'  Recirculation Ratio in Effect %1.0f             %5.2f \n',I,recyrat(I));
           fprintf(fid,'  Recirculation Flow Rate in Effect %1.0f      %5.2e kg/h \n',I,R(I));
         end
        end
    end
    fprintf(fid,'     \n');
%    for I = 1:E-1 
%    fprintf(fid,'  Pump power required between Effect %1.0f  \n',I+1);
%    fprintf(fid,'    and Effect %1.0f                             %5.2e kW\n',I,pumpkW(I));
%    end  
    fprintf(fid,'     \n');
    fprintf(fid,'     \n');
    end

    if (dlevel >= 4) 
    fprintf(fid,'  Evaporator Temperature Profiles:\n');
    fprintf(fid,'     \n');
    fprintf(fid,'Effect      Temp         Twall          Twall           Temp\n');
    fprintf(fid,'            Vapor        Vapor          Liquid         Liquid\n');
    fprintf(fid,'            (C)           (C)            (C)            (C)\n');
    fprintf(fid,'----------------------------------------------------------------------------\n');
    for I = 1:E
      if (I == 1)
      fprintf(fid,' %1.0f         %6.2f        %6.2f         %6.2f          %6.2f\n',I,StempK-Tref,Twv(I)-Tref,Twl(I)-Tref,Tboil(I)-Tref);
      else 
      fprintf(fid,' %1.0f         %6.2f        %6.2f         %6.2f          %6.2f\n',I,Tstcond(I)-Tref,Twv(I)-Tref,Twl(I)-Tref,Tboil(I)-Tref);
      end 
    end
    fprintf(fid,'----------------------------------------------------------------------------\n');
    fprintf(fid,'     \n');
    fprintf(fid,'     \n');
    
    fprintf(fid,'  Evaporator Heat Transfer Coefficients:\n');
    fprintf(fid,'     \n')
    fprintf(fid,'Effect     ho           NRe          NRe           NPr          hi             U\n');
    fprintf(fid,'                       Outside      Inside       Inside                     \n');
    fprintf(fid,'       (kJ/h-m^2-K)                                        (kJ/h-m^2-K)   (kJ/h-m^2-K) \n');
    fprintf(fid,'-----------------------------------------------------------------------------------------\n');
    for I = 1:E
      fprintf(fid,' %1.0f       %6.3e    %6.3e    %6.3e    %6.3e    %6.3e      %6.3e \n',I,hout(I),NReo(I),NRei(I),NPri(I),hin(I),ohtcoeff(I));
    end  
    fprintf(fid,'-----------------------------------------------------------------------------------------\n');
    fprintf(fid,'     \n');
    fprintf(fid,'     \n');

    fprintf(fid,'  Vapor Space:   \n');
    fprintf(fid,'   Capacity                              %5.2f m^3 \n',VBmax);
    fprintf(fid,'   Height                                %5.2f m \n',dB);
    fprintf(fid,'   Diameter                              %5.2f m \n',Hv);

    end  

    if (dlevel >= 3) 
      endtxt = [10 'END OF (',Ename,') TRANSPORT RESULTS PRINT TO FILE' 10];
      disp(endtxt);
    end   

%   Microbial and Quality Assessment results printout
    if (mandq == 1) & (dlevel >= 3)

    fprintf(fid,'     \n');
    fprintf(fid,'  Microbial (Worst Case) Assessment:   \n');
    fprintf(fid,'   Single Pass (minimum) residence time  %5.2f min \n',sum(tmin));
    fprintf(fid,'   Mimimum Process Temp taken as Bulk Temperature \n');
    fprintf(fid,'   Log Reduction in Microbial Load       %5.2e \n',DlogNred);
    fprintf(fid,'     \n');
    fprintf(fid,'  Quality (Worst Case) Assessment:   \n');
    if (dlevel == 3)
    fprintf(fid,'   Single Pass (minimum) residence time  %5.2f min \n',sum(tqmax));
    fprintf(fid,'   Maximum Process Temp taken as Bulk Temperature \n');
    elseif (dlevel >= 4)
      if (Mme(ulocate('mass')) > Fme(ulocate('mass')))
    fprintf(fid,'   90 Percent Residence Time             %5.2f min \n',sum(tqmax));
      else
    fprintf(fid,'   Single Pass Residence Time           %5.2f min \n',sum(tqmax));
      end
    fprintf(fid,'   Maximum Process Temp taken as Wall Temperature \n');
    end
    fprintf(fid,'   Log Reduction in Quality Load         %5.2e \n',DlogQred);


%     System input and exit stream names for microbial and quality assessment
      SIMQNAME = str2mat(Fname);
      SOMQNAME = str2mat(Lname);

%     System input microbial array
      SIMARRAY = [Fmdk];
%     System outputs microbial array
      SOMARRAY = [Lmdk(:,1);tmin(1);Tbulk(1)-Tref];

%     System intermediate microbial array 
      for I = 2:E 
        LIname = ['Liq' int2str(I)];
        SNMQNAME(I,1:size(LIname,2)) = LIname;
        SNMARRAY(:,I) = [Lmdk(:,I);tmin(I);Tbulk(I)-Tref]; 
      end 

      mdkprint(Ename,SIMQNAME,SOMQNAME,SNMQNAME,SIMARRAY,SOMARRAY,SNMARRAY);

%     System input quality array
      SIQARRAY = [Fqual];
%     System outputs quality array
      SOQARRAY = [Lqual(:,1);tqmax(1);Tqual(1)-Tref];

%     System intermediate microbial array
      for I = 2:E
        SNQARRAY(:,I) = [Lqual(:,I);tqmax(I);Tqual(I)-Tref];  
      end

      qprint(Ename,SIMQNAME,SOMQNAME,SNMQNAME,SIQARRAY,SOQARRAY,SNQARRAY);
    end

    if (econ >= 1)

%     Evaporator economic information 
      if (dlevel >= 2)
        Eutil = [S 0 0 0 0 0];
      else Eutil = [0 0 0 0 0 0]; end
      if (dlevel >= 3)
        Esize = Aavg;
        Enum = E;
        Eecon = ECON1;
      else
        Esize = 0;
        Enum = 0;
        Eecon = 0;
      end
      uofile(Eutil,Esize,Enum,Eecon,Ename);

%     Pump economic information 
      if (dlevel >= 3) 
        for I = 1:E-1  
          Putil = [0 0 0 0 0 0];
          Pname = ['Epump' int2str(I)] 
          uofile(Putil,pumpkW(I),1,ECON2,Pname);
        end   
      end  
    end


    fprintf(fid,'     \n');
    fprintf(fid,'**********************************************************************************************\n');
    fprintf(fid,'**********************************************************************************************\n');
    fprintf(fid,'     \n');
    
    % THIS IS WHERE THE CHANGE WAS MADE 8/21/01
    fclose('all');
    % END CHANGE 8/21/01

    sys = [];

  end % flag = 9 for printing 

else
   % Otherwise, no need to return anything since this is continuous system
   sys = [];

end % flags




